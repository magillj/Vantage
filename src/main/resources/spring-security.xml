<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- enable use-expressions -->
    <http auto-config="true" use-expressions="true">

        <!--Add Pages To Be Secured Here-->
        <intercept-url pattern="/admin**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_GP', 'ROLE_VP', 'ROLE_HM', 'ROLE_SCHOLARSHIP', 'ROLE_PHILANTHROPY', 'ROLE_P', 'ROLE_AG', 'ROLE_BG', 'ROLE_HOD', 'ROLE_SOCIAL', 'ROLE_HI', 'ROLE_RISK')" />
        <intercept-url pattern="/HM**" access="hasRole('ROLE_USER')" />
        <intercept-url pattern="landingpage" access="hasRole('ROLE_USER')" />

        <!-- access denied page -->
        <access-denied-handler error-page="/403" />

        <form-login
                login-page="/login"
                default-target-url="/landingpage"
                authentication-failure-url="/login?error"
                username-parameter="username"
                password-parameter="password" />
        <logout logout-success-url="/login?logout"  />
        <!-- enable csrf protection -->
        <!--<csrf/>-->
    </http>

    <beans:bean id='bCryptPasswordEncoder' class='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'/>

    <!-- Select users and user_roles from database -->
    <authentication-manager>
        <authentication-provider>
            <!--<user-service>-->
                <!--<user name="btaylor5@uw.edu" password="password" authorities="ROLE_USER, ROLE_ADMIN" />-->
            <!--</user-service>-->
            <password-encoder ref="bCryptPasswordEncoder">
            </password-encoder>
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query=
                                       "select Email as 'username', EncodedPassword as 'password', MemberID, FirstName from Member where Email=?"
                               authorities-by-username-query=
                                       "SELECT M.Email,  P.PositionName as 'ROLE', M.MemberID, M.FirstName from Member_Position MP
                                       JOIN Member M ON M.MemberID = MP.MemberID
                                       JOIN Position P ON P.PositionID = MP.PositionID
                                       WHERE M.Email=?  " />
        </authentication-provider>
    </authentication-manager>

</beans:beans>